{
  "contractName": "ERC20Swap",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "refundDelay",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "setRefundDelay",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "name": "onchainAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "paymentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "refundBlockHeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "tokenContractAddress",
          "type": "address"
        }
      ],
      "name": "OrderErc20FundingReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "orderUUID",
          "type": "bytes16"
        }
      ],
      "name": "OrderErc20Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "orderUUID",
          "type": "bytes16"
        }
      ],
      "name": "OrderErc20Refunded",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "name": "paymentHash",
          "type": "bytes32"
        },
        {
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "name": "preimage",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "name": "tokenContractAddress",
          "type": "address"
        }
      ],
      "name": "refund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526103c0600155336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111c8806100596000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632580145c1461007d5780633e602b4c146100eb57806363c509d5146101165780637bfa981914610176578063885737d8146101a35780638da5cb5b1461021b575b600080fd5b34801561008957600080fd5b506100e960048036038101908080356fffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050610272565b005b3480156100f757600080fd5b5061010061073c565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061017460048036038101908080356fffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610742565b005b34801561018257600080fd5b506101a160048036038101908080359060200190929190505050610ab5565b005b3480156101af57600080fd5b5061021960048036038101908080356fffffffffffffffffffffffffffffffff191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c23565b005b34801561022757600080fd5b50610230611177565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060026000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000209050600115158160060160019054906101000a900460ff16151514151561033c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f7264657220646f6573206e6f742065786973742e000000000000000000000081525060200191505060405180910390fd5b6000600281111561034957fe5b8160060160009054906101000a900460ff16600281111561036657fe5b1415156103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f726465722063616e6e6f7420626520636c61696d65642e000000000000000081525060200191505060405180910390fd5b8060020154600019166002836040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515610443578051825260208201915060208101905060208303925061041e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015610487573d6000803e3d6000fd5b5050506040513d602081101561049c57600080fd5b810190808051906020019092919050505060001916141515610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e636f7272656374207061796d656e7420707265696d6167652e000000000081525060200191505060405180910390fd5b806005015443111515156105a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6f206c61746520746f20636c61696d2e000000000000000000000000000081525060200191505060405180910390fd5b818160030181600019169055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600401546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050506040513d60208110156106a157600080fd5b81019080805190602001909291905050505060018160060160006101000a81548160ff021916908360028111156106d457fe5b02179055507f4be7082001f60f2505b01150c05e41746eebdc14140ea85873ab800288d3fedd8460405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390a150505050565b60015481565b600060026000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000209050600115158160060160019054906101000a900460ff16151514151561080c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f7264657220646f6573206e6f742065786973742e000000000000000000000081525060200191505060405180910390fd5b6000600281111561081957fe5b8160060160009054906101000a900460ff16600281111561083657fe5b1415156108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f726465722063616e6e6f7420626520726566756e6465642e0000000000000081525060200191505060405180910390fd5b806005015443111515610926576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6f206561726c7920746f20726566756e642e00000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600401546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109f157600080fd5b505af1158015610a05573d6000803e3d6000fd5b505050506040513d6020811015610a1b57600080fd5b81019080805190602001909291905050505060028160060160006101000a81548160ff02191690836002811115610a4e57fe5b02179055507fcfcf29fab214c4c5d494671a1fefb8a5efa9359fe62863910138b7f2881de63d8360405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f81526020017f6e2e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6170808111151515610c19576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f44656c617920697320746f6f206c617267652e0000000000000000000000000081525060200191505060405180910390fd5b8060018190555050565b600060026000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002090508060060160019054906101000a900460ff161515610d6a57338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160060160016101000a81548160ff021916908315150217905550838160020181600019169055506001544301816005018190555060008160060160006101000a81548160ff02191690836002811115610d5657fe5b021790555060008160040181905550610e30565b60006002811115610d7757fe5b8160060160009054906101000a900460ff166002811115610d9457fe5b141515610e2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4f7264657220616c726561647920636c61696d6564206f7220726566756e646581526020017f642e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8273ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ef7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e636f727265637420746f6b656e2e0000000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610fce57600080fd5b505af1158015610fe2573d6000803e3d6000fd5b505050506040513d6020811015610ff857600080fd5b8101908080519060200190929190505050151561107d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f556e61626c6520746f207472616e7366657220746f6b656e2e0000000000000081525060200191505060405180910390fd5b8181600401600082825401925050819055507f1fc3404b2b61946be5891f39322172e289ee6947959fd6ace7e6f754ac30b1c7858260040154836002015484600501548560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200185815260200184600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820fa2b5e3fa01cccda8c54c329886e64e46314665cc2934ca8d0c66883453fe94e0029",
  "source": "pragma solidity ^0.4.24;\n\nimport \"./Swap.sol\";\nimport \"./ERC20Interface.sol\";\n\ncontract ERC20Swap is Swap {\n    enum OrderState { HasFundingBalance, Claimed, Refunded }\n\n    struct SwapOrder {\n        address user;\n        address tokenContractAddress;\n        bytes32 paymentHash;\n        bytes32 preimage;\n        uint onchainAmount;\n        uint refundBlockHeight;\n        OrderState state;\n        bool exist;\n    }\n\n    mapping(bytes16 => SwapOrder) orders;\n\n    event OrderErc20FundingReceived(\n        bytes16 orderUUID,\n        uint onchainAmount,\n        bytes32 paymentHash,\n        uint refundBlockHeight,\n        address tokenContractAddress\n    );\n    event OrderErc20Claimed(bytes16 orderUUID);\n    event OrderErc20Refunded(bytes16 orderUUID);\n\n    /**\n     * Allow the sender to fund a swap in one or more transactions.\n     */\n    function fund(bytes16 orderUUID, bytes32 paymentHash, address tokenContractAddress, uint tokenAmount) public {\n        SwapOrder storage order = orders[orderUUID];\n\n        if (!order.exist) {\n            order.user = msg.sender;\n            order.tokenContractAddress = tokenContractAddress;\n            order.exist = true;\n            order.paymentHash = paymentHash;\n            order.refundBlockHeight = block.number + refundDelay;\n            order.state = OrderState.HasFundingBalance;\n            order.onchainAmount = 0;\n        } else {\n            require(order.state == OrderState.HasFundingBalance, \"Order already claimed or refunded.\");\n        }\n\n        // one token type per order\n        require(order.tokenContractAddress == tokenContractAddress, \"Incorrect token.\");\n        // fund token to this contract\n        require(ERC20Interface(tokenContractAddress).transferFrom(msg.sender, this, tokenAmount), \"Unable to transfer token.\");\n\n        order.onchainAmount += tokenAmount;\n\n        emit OrderErc20FundingReceived(\n            orderUUID,\n            order.onchainAmount,\n            order.paymentHash,\n            order.refundBlockHeight,\n            order.tokenContractAddress\n        );\n    }\n\n    /**\n     * Allow the recipient to claim the funds once they know the preimage of the hashlock.\n     * Anyone can claim but tokens only send to owner.\n     */\n    function claim(bytes16 orderUUID, address tokenContractAddress, bytes32 preimage) public {\n        SwapOrder storage order = orders[orderUUID];\n\n        require(order.exist == true, \"Order does not exist.\");\n        require(order.state == OrderState.HasFundingBalance, \"Order cannot be claimed.\");\n        require(sha256(abi.encodePacked(preimage)) == order.paymentHash, \"Incorrect payment preimage.\");\n        require(block.number <= order.refundBlockHeight, \"Too late to claim.\");\n\n        order.preimage = preimage;\n        // transfer token to owner\n        ERC20Interface(tokenContractAddress).transfer(owner, order.onchainAmount);\n        order.state = OrderState.Claimed;\n\n        emit OrderErc20Claimed(orderUUID);\n    }\n\n    /**\n     * Refund the sent token amount back to the funder if the timelock has expired.\n     */\n    function refund(bytes16 orderUUID, address tokenContractAddress) public {\n        SwapOrder storage order = orders[orderUUID];\n\n        require(order.exist == true, \"Order does not exist.\");\n        require(order.state == OrderState.HasFundingBalance, \"Order cannot be refunded.\");\n        require(block.number > order.refundBlockHeight, \"Too early to refund.\");\n\n        // transfer token to recepient\n        ERC20Interface(tokenContractAddress).transfer(order.user, order.onchainAmount);\n        order.state = OrderState.Refunded;\n\n        emit OrderErc20Refunded(orderUUID);\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "updatedAt": "2019-05-14T17:31:05.903Z"
}
