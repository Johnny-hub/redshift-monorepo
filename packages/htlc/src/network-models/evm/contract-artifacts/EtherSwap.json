{
  "contractName": "EtherSwap",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "refundDelay",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "setRefundDelay",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "name": "onchainAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "paymentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "refundBlockHeight",
          "type": "uint256"
        }
      ],
      "name": "OrderFundingReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "orderUUID",
          "type": "bytes16"
        }
      ],
      "name": "OrderClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "orderUUID",
          "type": "bytes16"
        }
      ],
      "name": "OrderRefunded",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "name": "paymentHash",
          "type": "bytes32"
        }
      ],
      "name": "fund",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orderUUID",
          "type": "bytes16"
        },
        {
          "name": "preimage",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orderUUID",
          "type": "bytes16"
        }
      ],
      "name": "refund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526103c0600155336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610cc6806100596000396000f3fe6080604052600436106100555760003560e01c80633e602b4c1461005a5780633fdcdd1e146100855780637bfa9819146100d05780638da5cb5b1461010b578063aadd21c614610162578063dfdecfaf146101ba575b600080fd5b34801561006657600080fd5b5061006f610208565b6040518082815260200191505060405180910390f35b6100ce6004803603604081101561009b57600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291908035906020019092919050505061020e565b005b3480156100dc57600080fd5b50610109600480360360208110156100f357600080fd5b8101908080359060200190929190505050610425565b005b34801561011757600080fd5b5061012061054c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016e57600080fd5b506101b86004803603604081101561018557600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190505050610571565b005b3480156101c657600080fd5b50610206600480360360208110156101dd57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610982565b005b60015481565b600060026000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002090508060050160019054906101000a900460ff1661030c57338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160050160016101000a81548160ff0219169083151502179055508181600101819055506001544301816004018190555060008160050160006101000a81548160ff021916908360028111156102f857fe5b02179055506000816003018190555061038d565b6000600281111561031957fe5b8160050160009054906101000a900460ff16600281111561033657fe5b1461038c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610c796022913960400191505060405180910390fd5b5b3481600301600082825401925050819055507f028c40b551ffbe42d348aaa48d3470dcef2bbd8403bfcb1374ca9a9b77e1178c8382600301548360010154846004015460405180856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200184815260200183815260200182815260200194505050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610c576022913960400191505060405180910390fd5b617080811115610542576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f44656c617920697320746f6f206c617267652e0000000000000000000000000081525060200191505060405180910390fd5b8060018190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060026000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000209050600115158160050160019054906101000a900460ff16151514610639576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f7264657220646f6573206e6f742065786973742e000000000000000000000081525060200191505060405180910390fd5b6000600281111561064657fe5b8160050160009054906101000a900460ff16600281111561066357fe5b146106d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f726465722063616e6e6f7420626520636c61696d65642e000000000000000081525060200191505060405180910390fd5b8060010154600283604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310610730578051825260208201915060208101905060208303925061070d565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610772573d6000803e3d6000fd5b5050506040513d602081101561078757600080fd5b81019080805190602001909291905050501461080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e636f7272656374207061796d656e7420707265696d6167652e000000000081525060200191505060405180910390fd5b8060040154431115610885576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6f206c61746520746f20636c61696d2e000000000000000000000000000081525060200191505060405180910390fd5b8181600201819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82600301549081150290604051600060405180830381858888f193505050501580156108f9573d6000803e3d6000fd5b5060018160050160006101000a81548160ff0219169083600281111561091b57fe5b02179055507f96a7ce28124a58eee4f04c2ee97fd44eb93c29d0df55a43fa5e0daccb20a0be58360405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390a1505050565b600060026000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000209050600115158160050160019054906101000a900460ff16151514610a4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f7264657220646f6573206e6f742065786973742e000000000000000000000081525060200191505060405180910390fd5b60006002811115610a5757fe5b8160050160009054906101000a900460ff166002811115610a7457fe5b14610ae7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f726465722063616e6e6f7420626520726566756e6465642e0000000000000081525060200191505060405180910390fd5b80600401544311610b60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6f206561726c7920746f20726566756e642e00000000000000000000000081525060200191505060405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82600301549081150290604051600060405180830381858888f19350505050158015610bce573d6000803e3d6000fd5b5060028160050160006101000a81548160ff02191690836002811115610bf057fe5b02179055507f0fc93734e5a973e72ab53332bf6e822d652e9d044fa7f4fe3b13028352c148808260405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390a1505056fe4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6e2e4f7264657220616c726561647920636c61696d6564206f7220726566756e6465642ea165627a7a72305820f4a2ea279031ffcecf02656dffdf512aa13af298c41b2194199b3fd7a151661f0029",
  "source": "pragma solidity ^0.5.8;\n\nimport \"./Swap.sol\";\n\ncontract EtherSwap is Swap {\n    enum OrderState { HasFundingBalance, Claimed, Refunded }\n\n    struct SwapOrder {\n        address payable user;\n        bytes32 paymentHash;\n        bytes32 preimage;\n        uint onchainAmount;\n        uint refundBlockHeight;\n        OrderState state;\n        bool exist;\n    }\n\n    mapping(bytes16 => SwapOrder) orders;\n\n    event OrderFundingReceived(bytes16 orderUUID, uint onchainAmount, bytes32 paymentHash, uint refundBlockHeight);\n    event OrderClaimed(bytes16 orderUUID);\n    event OrderRefunded(bytes16 orderUUID);\n\n    /**\n     * Allow the sender to fund a swap in one or more transactions.\n     */\n    function fund(bytes16 orderUUID, bytes32 paymentHash) public payable {\n        SwapOrder storage order = orders[orderUUID];\n\n        if (!order.exist) {\n            order.user = msg.sender;\n            order.exist = true;\n            order.paymentHash = paymentHash;\n            order.refundBlockHeight = block.number + refundDelay;\n            order.state = OrderState.HasFundingBalance;\n            order.onchainAmount = 0;\n        } else {\n            require(order.state == OrderState.HasFundingBalance, \"Order already claimed or refunded.\");\n        }\n        order.onchainAmount += msg.value;\n\n        emit OrderFundingReceived(orderUUID, order.onchainAmount, order.paymentHash, order.refundBlockHeight);\n    }\n\n    /**\n     * Allow the recipient to claim the funds once they know the preimage of the hashlock.\n     * Anyone can claim but tokens only send to owner.\n     */\n    function claim(bytes16 orderUUID, bytes32 preimage) public {\n        SwapOrder storage order = orders[orderUUID];\n\n        require(order.exist == true, \"Order does not exist.\");\n        require(order.state == OrderState.HasFundingBalance, \"Order cannot be claimed.\");\n        require(sha256(abi.encodePacked(preimage)) == order.paymentHash, \"Incorrect payment preimage.\");\n        require(block.number <= order.refundBlockHeight, \"Too late to claim.\");\n\n        order.preimage = preimage;\n        owner.transfer(order.onchainAmount);\n        order.state = OrderState.Claimed;\n\n        emit OrderClaimed(orderUUID);\n    }\n\n    /**\n     * Refund the sent amount back to the funder if the timelock has expired.\n     */\n    function refund(bytes16 orderUUID) public {\n        SwapOrder storage order = orders[orderUUID];\n\n        require(order.exist == true, \"Order does not exist.\");\n        require(order.state == OrderState.HasFundingBalance, \"Order cannot be refunded.\");\n        require(block.number > order.refundBlockHeight, \"Too early to refund.\");\n\n        order.user.transfer(order.onchainAmount);\n        order.state = OrderState.Refunded;\n\n        emit OrderRefunded(orderUUID);\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "updatedAt": "2019-09-03T22:57:20.680Z"
}
